//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HealthcareApp.Droid.DBData {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback HospBulletinOperationCompleted;
        
        private System.Threading.SendOrPostCallback HospBulletinImageByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback HealthTipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback HealthTipsImageByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback PatientCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback PatientAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDoctorListOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDoctorspecializationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoctorTimeSlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback BookAppointmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppoinmentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillExaminationListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAppointmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getuploadimageOperationCompleted;
        
        private System.Threading.SendOrPostCallback gethospitalnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorQueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingQueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertEmployeeSwipesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertBeaconDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoctorLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchByRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMedicineNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstructionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMedicineNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPrescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetByRegiNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientListForAdvanceQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdvanceQueUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientListbylistofobjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback gethospitalnamebylistofobjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveprescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDoctorImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientImage1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrescriptionDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReport1OperationCompleted;
        
        private System.Threading.SendOrPostCallback HealthTips1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Login1OperationCompleted;
        
        private System.Threading.SendOrPostCallback HealthTipsImageById1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportinPdf1OperationCompleted;
        
        private System.Threading.SendOrPostCallback AppoinmentList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAppointment1OperationCompleted;
        
        private System.Threading.SendOrPostCallback BookAppointment1OperationCompleted;
        
        private System.Threading.SendOrPostCallback DoctorTimeSlot1OperationCompleted;
        
        private System.Threading.SendOrPostCallback EditProfile1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProfileDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForGotPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintPrescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillSpecialisationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDoctorList1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConsultationChargesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVitalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppointmentDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVitalDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecializationWiseCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://webapi.medismarthis.com/Service.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetPatientImageCompletedEventHandler GetPatientImageCompleted;
        
        /// <remarks/>
        public event HospBulletinCompletedEventHandler HospBulletinCompleted;
        
        /// <remarks/>
        public event HospBulletinImageByIdCompletedEventHandler HospBulletinImageByIdCompleted;
        
        /// <remarks/>
        public event HealthTipsCompletedEventHandler HealthTipsCompleted;
        
        /// <remarks/>
        public event HealthTipsImageByIdCompletedEventHandler HealthTipsImageByIdCompleted;
        
        /// <remarks/>
        public event PatientCountCompletedEventHandler PatientCountCompleted;
        
        /// <remarks/>
        public event PatientAdviceCompletedEventHandler PatientAdviceCompleted;
        
        /// <remarks/>
        public event PrescriptionCompletedEventHandler PrescriptionCompleted;
        
        /// <remarks/>
        public event FillDoctorListCompletedEventHandler FillDoctorListCompleted;
        
        /// <remarks/>
        public event FillDoctorspecializationCompletedEventHandler FillDoctorspecializationCompleted;
        
        /// <remarks/>
        public event DoctorTimeSlotCompletedEventHandler DoctorTimeSlotCompleted;
        
        /// <remarks/>
        public event BookAppointmentCompletedEventHandler BookAppointmentCompleted;
        
        /// <remarks/>
        public event AppoinmentListCompletedEventHandler AppoinmentListCompleted;
        
        /// <remarks/>
        public event FillExaminationListCompletedEventHandler FillExaminationListCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event CancelAppointmentCompletedEventHandler CancelAppointmentCompleted;
        
        /// <remarks/>
        public event getuploadimageCompletedEventHandler getuploadimageCompleted;
        
        /// <remarks/>
        public event gethospitalnameCompletedEventHandler gethospitalnameCompleted;
        
        /// <remarks/>
        public event GetPatientListCompletedEventHandler GetPatientListCompleted;
        
        /// <remarks/>
        public event EditProfileCompletedEventHandler EditProfileCompleted;
        
        /// <remarks/>
        public event getQueueCompletedEventHandler getQueueCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDoctorQueCompletedEventHandler GetDoctorQueCompleted;
        
        /// <remarks/>
        public event GetBillingQueCompletedEventHandler GetBillingQueCompleted;
        
        /// <remarks/>
        public event GetTestCompletedEventHandler GetTestCompleted;
        
        /// <remarks/>
        public event GetReportListCompletedEventHandler GetReportListCompleted;
        
        /// <remarks/>
        public event UploadReportCompletedEventHandler UploadReportCompleted;
        
        /// <remarks/>
        public event InsertEmployeeSwipesCompletedEventHandler InsertEmployeeSwipesCompleted;
        
        /// <remarks/>
        public event InsertBeaconDetailCompletedEventHandler InsertBeaconDetailCompleted;
        
        /// <remarks/>
        public event DoctorLoginCompletedEventHandler DoctorLoginCompleted;
        
        /// <remarks/>
        public event SearchByRegistrationCompletedEventHandler SearchByRegistrationCompleted;
        
        /// <remarks/>
        public event GetMedicineNameCompletedEventHandler GetMedicineNameCompleted;
        
        /// <remarks/>
        public event GetInstructionsCompletedEventHandler GetInstructionsCompleted;
        
        /// <remarks/>
        public event InsertMedicineNameCompletedEventHandler InsertMedicineNameCompleted;
        
        /// <remarks/>
        public event InsertPrescriptionCompletedEventHandler InsertPrescriptionCompleted;
        
        /// <remarks/>
        public event GetByRegiNoCompletedEventHandler GetByRegiNoCompleted;
        
        /// <remarks/>
        public event GetPatientListForAdvanceQueueCompletedEventHandler GetPatientListForAdvanceQueueCompleted;
        
        /// <remarks/>
        public event AdvanceQueUpdateCompletedEventHandler AdvanceQueUpdateCompleted;
        
        /// <remarks/>
        public event GetPatientListbylistofobjectsCompletedEventHandler GetPatientListbylistofobjectsCompleted;
        
        /// <remarks/>
        public event GetReportCompletedEventHandler GetReportCompleted;
        
        /// <remarks/>
        public event gethospitalnamebylistofobjectCompletedEventHandler gethospitalnamebylistofobjectCompleted;
        
        /// <remarks/>
        public event SaveprescriptionCompletedEventHandler SaveprescriptionCompleted;
        
        /// <remarks/>
        public event GetDoctorImageCompletedEventHandler GetDoctorImageCompleted;
        
        /// <remarks/>
        public event GetPatientImage1CompletedEventHandler GetPatientImage1Completed;
        
        /// <remarks/>
        public event GetPrescriptionDetailsCompletedEventHandler GetPrescriptionDetailsCompleted;
        
        /// <remarks/>
        public event GetReport1CompletedEventHandler GetReport1Completed;
        
        /// <remarks/>
        public event HealthTips1CompletedEventHandler HealthTips1Completed;
        
        /// <remarks/>
        public event Login1CompletedEventHandler Login1Completed;
        
        /// <remarks/>
        public event HealthTipsImageById1CompletedEventHandler HealthTipsImageById1Completed;
        
        /// <remarks/>
        public event GetReportinPdf1CompletedEventHandler GetReportinPdf1Completed;
        
        /// <remarks/>
        public event AppoinmentList1CompletedEventHandler AppoinmentList1Completed;
        
        /// <remarks/>
        public event CancelAppointment1CompletedEventHandler CancelAppointment1Completed;
        
        /// <remarks/>
        public event BookAppointment1CompletedEventHandler BookAppointment1Completed;
        
        /// <remarks/>
        public event DoctorTimeSlot1CompletedEventHandler DoctorTimeSlot1Completed;
        
        /// <remarks/>
        public event EditProfile1CompletedEventHandler EditProfile1Completed;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event GetProfileDetailsCompletedEventHandler GetProfileDetailsCompleted;
        
        /// <remarks/>
        public event UpdateProfileCompletedEventHandler UpdateProfileCompleted;
        
        /// <remarks/>
        public event UpdatePhotoCompletedEventHandler UpdatePhotoCompleted;
        
        /// <remarks/>
        public event ForGotPasswordCompletedEventHandler ForGotPasswordCompleted;
        
        /// <remarks/>
        public event PrintPrescriptionCompletedEventHandler PrintPrescriptionCompleted;
        
        /// <remarks/>
        public event FillSpecialisationCompletedEventHandler FillSpecialisationCompleted;
        
        /// <remarks/>
        public event FillDoctorList1CompletedEventHandler FillDoctorList1Completed;
        
        /// <remarks/>
        public event GetConsultationChargesCompletedEventHandler GetConsultationChargesCompleted;
        
        /// <remarks/>
        public event UploadDocumentCompletedEventHandler UploadDocumentCompleted;
        
        /// <remarks/>
        public event SaveVitalDataCompletedEventHandler SaveVitalDataCompleted;
        
        /// <remarks/>
        public event GetAppointmentDetailsCompletedEventHandler GetAppointmentDetailsCompleted;
        
        /// <remarks/>
        public event GetVitalDetailsCompletedEventHandler GetVitalDetailsCompleted;
        
        /// <remarks/>
        public event GetSpecializationWiseCountCompletedEventHandler GetSpecializationWiseCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string Username, string Password) {
            object[] results = this.Invoke("Login", new object[] {
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password) {
            this.LoginAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        Username,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetPatientImage(string PatientId, string BranchId) {
            object[] results = this.Invoke("GetPatientImage", new object[] {
                        PatientId,
                        BranchId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientImageAsync(string PatientId, string BranchId) {
            this.GetPatientImageAsync(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetPatientImageAsync(string PatientId, string BranchId, object userState) {
            if ((this.GetPatientImageOperationCompleted == null)) {
                this.GetPatientImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientImageOperationCompleted);
            }
            this.InvokeAsync("GetPatientImage", new object[] {
                        PatientId,
                        BranchId}, this.GetPatientImageOperationCompleted, userState);
        }
        
        private void OnGetPatientImageOperationCompleted(object arg) {
            if ((this.GetPatientImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientImageCompleted(this, new GetPatientImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HospBulletin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HospBulletin(string PatientId, string BranchId) {
            object[] results = this.Invoke("HospBulletin", new object[] {
                        PatientId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HospBulletinAsync(string PatientId, string BranchId) {
            this.HospBulletinAsync(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void HospBulletinAsync(string PatientId, string BranchId, object userState) {
            if ((this.HospBulletinOperationCompleted == null)) {
                this.HospBulletinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHospBulletinOperationCompleted);
            }
            this.InvokeAsync("HospBulletin", new object[] {
                        PatientId,
                        BranchId}, this.HospBulletinOperationCompleted, userState);
        }
        
        private void OnHospBulletinOperationCompleted(object arg) {
            if ((this.HospBulletinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HospBulletinCompleted(this, new HospBulletinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HospBulletinImageById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode HospBulletinImageById(string TipsId) {
            object[] results = this.Invoke("HospBulletinImageById", new object[] {
                        TipsId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void HospBulletinImageByIdAsync(string TipsId) {
            this.HospBulletinImageByIdAsync(TipsId, null);
        }
        
        /// <remarks/>
        public void HospBulletinImageByIdAsync(string TipsId, object userState) {
            if ((this.HospBulletinImageByIdOperationCompleted == null)) {
                this.HospBulletinImageByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHospBulletinImageByIdOperationCompleted);
            }
            this.InvokeAsync("HospBulletinImageById", new object[] {
                        TipsId}, this.HospBulletinImageByIdOperationCompleted, userState);
        }
        
        private void OnHospBulletinImageByIdOperationCompleted(object arg) {
            if ((this.HospBulletinImageByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HospBulletinImageByIdCompleted(this, new HospBulletinImageByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HealthTips", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HealthTips(string PatientId, string BranchId) {
            object[] results = this.Invoke("HealthTips", new object[] {
                        PatientId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HealthTipsAsync(string PatientId, string BranchId) {
            this.HealthTipsAsync(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void HealthTipsAsync(string PatientId, string BranchId, object userState) {
            if ((this.HealthTipsOperationCompleted == null)) {
                this.HealthTipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHealthTipsOperationCompleted);
            }
            this.InvokeAsync("HealthTips", new object[] {
                        PatientId,
                        BranchId}, this.HealthTipsOperationCompleted, userState);
        }
        
        private void OnHealthTipsOperationCompleted(object arg) {
            if ((this.HealthTipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HealthTipsCompleted(this, new HealthTipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HealthTipsImageById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode HealthTipsImageById(string TipsId) {
            object[] results = this.Invoke("HealthTipsImageById", new object[] {
                        TipsId});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void HealthTipsImageByIdAsync(string TipsId) {
            this.HealthTipsImageByIdAsync(TipsId, null);
        }
        
        /// <remarks/>
        public void HealthTipsImageByIdAsync(string TipsId, object userState) {
            if ((this.HealthTipsImageByIdOperationCompleted == null)) {
                this.HealthTipsImageByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHealthTipsImageByIdOperationCompleted);
            }
            this.InvokeAsync("HealthTipsImageById", new object[] {
                        TipsId}, this.HealthTipsImageByIdOperationCompleted, userState);
        }
        
        private void OnHealthTipsImageByIdOperationCompleted(object arg) {
            if ((this.HealthTipsImageByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HealthTipsImageByIdCompleted(this, new HealthTipsImageByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PatientCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PatientCount(string BranchId) {
            object[] results = this.Invoke("PatientCount", new object[] {
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PatientCountAsync(string BranchId) {
            this.PatientCountAsync(BranchId, null);
        }
        
        /// <remarks/>
        public void PatientCountAsync(string BranchId, object userState) {
            if ((this.PatientCountOperationCompleted == null)) {
                this.PatientCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPatientCountOperationCompleted);
            }
            this.InvokeAsync("PatientCount", new object[] {
                        BranchId}, this.PatientCountOperationCompleted, userState);
        }
        
        private void OnPatientCountOperationCompleted(object arg) {
            if ((this.PatientCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PatientCountCompleted(this, new PatientCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PatientAdvice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PatientAdvice(string PatientId, string BranchId) {
            object[] results = this.Invoke("PatientAdvice", new object[] {
                        PatientId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PatientAdviceAsync(string PatientId, string BranchId) {
            this.PatientAdviceAsync(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void PatientAdviceAsync(string PatientId, string BranchId, object userState) {
            if ((this.PatientAdviceOperationCompleted == null)) {
                this.PatientAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPatientAdviceOperationCompleted);
            }
            this.InvokeAsync("PatientAdvice", new object[] {
                        PatientId,
                        BranchId}, this.PatientAdviceOperationCompleted, userState);
        }
        
        private void OnPatientAdviceOperationCompleted(object arg) {
            if ((this.PatientAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PatientAdviceCompleted(this, new PatientAdviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Prescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Prescription(string PatientId, string Branchid, string AppDate) {
            object[] results = this.Invoke("Prescription", new object[] {
                        PatientId,
                        Branchid,
                        AppDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrescriptionAsync(string PatientId, string Branchid, string AppDate) {
            this.PrescriptionAsync(PatientId, Branchid, AppDate, null);
        }
        
        /// <remarks/>
        public void PrescriptionAsync(string PatientId, string Branchid, string AppDate, object userState) {
            if ((this.PrescriptionOperationCompleted == null)) {
                this.PrescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrescriptionOperationCompleted);
            }
            this.InvokeAsync("Prescription", new object[] {
                        PatientId,
                        Branchid,
                        AppDate}, this.PrescriptionOperationCompleted, userState);
        }
        
        private void OnPrescriptionOperationCompleted(object arg) {
            if ((this.PrescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrescriptionCompleted(this, new PrescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillDoctorList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FillDoctorList(string BranchId, string AppDate) {
            object[] results = this.Invoke("FillDoctorList", new object[] {
                        BranchId,
                        AppDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FillDoctorListAsync(string BranchId, string AppDate) {
            this.FillDoctorListAsync(BranchId, AppDate, null);
        }
        
        /// <remarks/>
        public void FillDoctorListAsync(string BranchId, string AppDate, object userState) {
            if ((this.FillDoctorListOperationCompleted == null)) {
                this.FillDoctorListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDoctorListOperationCompleted);
            }
            this.InvokeAsync("FillDoctorList", new object[] {
                        BranchId,
                        AppDate}, this.FillDoctorListOperationCompleted, userState);
        }
        
        private void OnFillDoctorListOperationCompleted(object arg) {
            if ((this.FillDoctorListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDoctorListCompleted(this, new FillDoctorListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillDoctorspecialization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FillDoctorspecialization(string BranchId, string DocId) {
            object[] results = this.Invoke("FillDoctorspecialization", new object[] {
                        BranchId,
                        DocId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FillDoctorspecializationAsync(string BranchId, string DocId) {
            this.FillDoctorspecializationAsync(BranchId, DocId, null);
        }
        
        /// <remarks/>
        public void FillDoctorspecializationAsync(string BranchId, string DocId, object userState) {
            if ((this.FillDoctorspecializationOperationCompleted == null)) {
                this.FillDoctorspecializationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDoctorspecializationOperationCompleted);
            }
            this.InvokeAsync("FillDoctorspecialization", new object[] {
                        BranchId,
                        DocId}, this.FillDoctorspecializationOperationCompleted, userState);
        }
        
        private void OnFillDoctorspecializationOperationCompleted(object arg) {
            if ((this.FillDoctorspecializationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDoctorspecializationCompleted(this, new FillDoctorspecializationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoctorTimeSlot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoctorTimeSlot(string DocId, string Days, string BranchId, string Date) {
            object[] results = this.Invoke("DoctorTimeSlot", new object[] {
                        DocId,
                        Days,
                        BranchId,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoctorTimeSlotAsync(string DocId, string Days, string BranchId, string Date) {
            this.DoctorTimeSlotAsync(DocId, Days, BranchId, Date, null);
        }
        
        /// <remarks/>
        public void DoctorTimeSlotAsync(string DocId, string Days, string BranchId, string Date, object userState) {
            if ((this.DoctorTimeSlotOperationCompleted == null)) {
                this.DoctorTimeSlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoctorTimeSlotOperationCompleted);
            }
            this.InvokeAsync("DoctorTimeSlot", new object[] {
                        DocId,
                        Days,
                        BranchId,
                        Date}, this.DoctorTimeSlotOperationCompleted, userState);
        }
        
        private void OnDoctorTimeSlotOperationCompleted(object arg) {
            if ((this.DoctorTimeSlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoctorTimeSlotCompleted(this, new DoctorTimeSlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BookAppointment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookAppointment(string PatientId, string Time, string BranchId, string DocId, string AppointmentDate) {
            object[] results = this.Invoke("BookAppointment", new object[] {
                        PatientId,
                        Time,
                        BranchId,
                        DocId,
                        AppointmentDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookAppointmentAsync(string PatientId, string Time, string BranchId, string DocId, string AppointmentDate) {
            this.BookAppointmentAsync(PatientId, Time, BranchId, DocId, AppointmentDate, null);
        }
        
        /// <remarks/>
        public void BookAppointmentAsync(string PatientId, string Time, string BranchId, string DocId, string AppointmentDate, object userState) {
            if ((this.BookAppointmentOperationCompleted == null)) {
                this.BookAppointmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookAppointmentOperationCompleted);
            }
            this.InvokeAsync("BookAppointment", new object[] {
                        PatientId,
                        Time,
                        BranchId,
                        DocId,
                        AppointmentDate}, this.BookAppointmentOperationCompleted, userState);
        }
        
        private void OnBookAppointmentOperationCompleted(object arg) {
            if ((this.BookAppointmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookAppointmentCompleted(this, new BookAppointmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppoinmentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppoinmentList(string PatientId, string BranchId, string DocId) {
            object[] results = this.Invoke("AppoinmentList", new object[] {
                        PatientId,
                        BranchId,
                        DocId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppoinmentListAsync(string PatientId, string BranchId, string DocId) {
            this.AppoinmentListAsync(PatientId, BranchId, DocId, null);
        }
        
        /// <remarks/>
        public void AppoinmentListAsync(string PatientId, string BranchId, string DocId, object userState) {
            if ((this.AppoinmentListOperationCompleted == null)) {
                this.AppoinmentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppoinmentListOperationCompleted);
            }
            this.InvokeAsync("AppoinmentList", new object[] {
                        PatientId,
                        BranchId,
                        DocId}, this.AppoinmentListOperationCompleted, userState);
        }
        
        private void OnAppoinmentListOperationCompleted(object arg) {
            if ((this.AppoinmentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppoinmentListCompleted(this, new AppoinmentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillExaminationList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FillExaminationList(string BranchId, string RegiNo, string ExaminationId) {
            object[] results = this.Invoke("FillExaminationList", new object[] {
                        BranchId,
                        RegiNo,
                        ExaminationId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FillExaminationListAsync(string BranchId, string RegiNo, string ExaminationId) {
            this.FillExaminationListAsync(BranchId, RegiNo, ExaminationId, null);
        }
        
        /// <remarks/>
        public void FillExaminationListAsync(string BranchId, string RegiNo, string ExaminationId, object userState) {
            if ((this.FillExaminationListOperationCompleted == null)) {
                this.FillExaminationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillExaminationListOperationCompleted);
            }
            this.InvokeAsync("FillExaminationList", new object[] {
                        BranchId,
                        RegiNo,
                        ExaminationId}, this.FillExaminationListOperationCompleted, userState);
        }
        
        private void OnFillExaminationListOperationCompleted(object arg) {
            if ((this.FillExaminationListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillExaminationListCompleted(this, new FillExaminationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFile(string f, string fileName, string BranchID, string APPID, string Regino, string DocID, string Date) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        f,
                        fileName,
                        BranchID,
                        APPID,
                        Regino,
                        DocID,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string f, string fileName, string BranchID, string APPID, string Regino, string DocID, string Date) {
            this.UploadFileAsync(f, fileName, BranchID, APPID, Regino, DocID, Date, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string f, string fileName, string BranchID, string APPID, string Regino, string DocID, string Date, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        f,
                        fileName,
                        BranchID,
                        APPID,
                        Regino,
                        DocID,
                        Date}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelAppointment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelAppointment(string AppointmentId, string BranchId, string DocId, string AppointmentDate) {
            object[] results = this.Invoke("CancelAppointment", new object[] {
                        AppointmentId,
                        BranchId,
                        DocId,
                        AppointmentDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAppointmentAsync(string AppointmentId, string BranchId, string DocId, string AppointmentDate) {
            this.CancelAppointmentAsync(AppointmentId, BranchId, DocId, AppointmentDate, null);
        }
        
        /// <remarks/>
        public void CancelAppointmentAsync(string AppointmentId, string BranchId, string DocId, string AppointmentDate, object userState) {
            if ((this.CancelAppointmentOperationCompleted == null)) {
                this.CancelAppointmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAppointmentOperationCompleted);
            }
            this.InvokeAsync("CancelAppointment", new object[] {
                        AppointmentId,
                        BranchId,
                        DocId,
                        AppointmentDate}, this.CancelAppointmentOperationCompleted, userState);
        }
        
        private void OnCancelAppointmentOperationCompleted(object arg) {
            if ((this.CancelAppointmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAppointmentCompleted(this, new CancelAppointmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getuploadimage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getuploadimage(string Regino) {
            object[] results = this.Invoke("getuploadimage", new object[] {
                        Regino});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getuploadimageAsync(string Regino) {
            this.getuploadimageAsync(Regino, null);
        }
        
        /// <remarks/>
        public void getuploadimageAsync(string Regino, object userState) {
            if ((this.getuploadimageOperationCompleted == null)) {
                this.getuploadimageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetuploadimageOperationCompleted);
            }
            this.InvokeAsync("getuploadimage", new object[] {
                        Regino}, this.getuploadimageOperationCompleted, userState);
        }
        
        private void OngetuploadimageOperationCompleted(object arg) {
            if ((this.getuploadimageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getuploadimageCompleted(this, new getuploadimageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/gethospitalname", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string gethospitalname(string Docid) {
            object[] results = this.Invoke("gethospitalname", new object[] {
                        Docid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void gethospitalnameAsync(string Docid) {
            this.gethospitalnameAsync(Docid, null);
        }
        
        /// <remarks/>
        public void gethospitalnameAsync(string Docid, object userState) {
            if ((this.gethospitalnameOperationCompleted == null)) {
                this.gethospitalnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngethospitalnameOperationCompleted);
            }
            this.InvokeAsync("gethospitalname", new object[] {
                        Docid}, this.gethospitalnameOperationCompleted, userState);
        }
        
        private void OngethospitalnameOperationCompleted(object arg) {
            if ((this.gethospitalnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.gethospitalnameCompleted(this, new gethospitalnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientList(string BranchId, string AppointmentDate, string DocId) {
            object[] results = this.Invoke("GetPatientList", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientListAsync(string BranchId, string AppointmentDate, string DocId) {
            this.GetPatientListAsync(BranchId, AppointmentDate, DocId, null);
        }
        
        /// <remarks/>
        public void GetPatientListAsync(string BranchId, string AppointmentDate, string DocId, object userState) {
            if ((this.GetPatientListOperationCompleted == null)) {
                this.GetPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientListOperationCompleted);
            }
            this.InvokeAsync("GetPatientList", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId}, this.GetPatientListOperationCompleted, userState);
        }
        
        private void OnGetPatientListOperationCompleted(object arg) {
            if ((this.GetPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientListCompleted(this, new GetPatientListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EditProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditProfile(string username, string password, string Regino) {
            object[] results = this.Invoke("EditProfile", new object[] {
                        username,
                        password,
                        Regino});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditProfileAsync(string username, string password, string Regino) {
            this.EditProfileAsync(username, password, Regino, null);
        }
        
        /// <remarks/>
        public void EditProfileAsync(string username, string password, string Regino, object userState) {
            if ((this.EditProfileOperationCompleted == null)) {
                this.EditProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProfileOperationCompleted);
            }
            this.InvokeAsync("EditProfile", new object[] {
                        username,
                        password,
                        Regino}, this.EditProfileOperationCompleted, userState);
        }
        
        private void OnEditProfileOperationCompleted(object arg) {
            if ((this.EditProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProfileCompleted(this, new EditProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getQueue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getQueue(string BarnchId, string AppoinemtDate, string PanelDoctorId, string Appid, string type) {
            object[] results = this.Invoke("getQueue", new object[] {
                        BarnchId,
                        AppoinemtDate,
                        PanelDoctorId,
                        Appid,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getQueueAsync(string BarnchId, string AppoinemtDate, string PanelDoctorId, string Appid, string type) {
            this.getQueueAsync(BarnchId, AppoinemtDate, PanelDoctorId, Appid, type, null);
        }
        
        /// <remarks/>
        public void getQueueAsync(string BarnchId, string AppoinemtDate, string PanelDoctorId, string Appid, string type, object userState) {
            if ((this.getQueueOperationCompleted == null)) {
                this.getQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetQueueOperationCompleted);
            }
            this.InvokeAsync("getQueue", new object[] {
                        BarnchId,
                        AppoinemtDate,
                        PanelDoctorId,
                        Appid,
                        type}, this.getQueueOperationCompleted, userState);
        }
        
        private void OngetQueueOperationCompleted(object arg) {
            if ((this.getQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getQueueCompleted(this, new getQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetData(string Branchid) {
            object[] results = this.Invoke("GetData", new object[] {
                        Branchid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string Branchid) {
            this.GetDataAsync(Branchid, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string Branchid, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        Branchid}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDoctorQue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDoctorQue(string roomName, string Branchid, string Doctorid) {
            object[] results = this.Invoke("GetDoctorQue", new object[] {
                        roomName,
                        Branchid,
                        Doctorid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDoctorQueAsync(string roomName, string Branchid, string Doctorid) {
            this.GetDoctorQueAsync(roomName, Branchid, Doctorid, null);
        }
        
        /// <remarks/>
        public void GetDoctorQueAsync(string roomName, string Branchid, string Doctorid, object userState) {
            if ((this.GetDoctorQueOperationCompleted == null)) {
                this.GetDoctorQueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorQueOperationCompleted);
            }
            this.InvokeAsync("GetDoctorQue", new object[] {
                        roomName,
                        Branchid,
                        Doctorid}, this.GetDoctorQueOperationCompleted, userState);
        }
        
        private void OnGetDoctorQueOperationCompleted(object arg) {
            if ((this.GetDoctorQueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorQueCompleted(this, new GetDoctorQueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBillingQue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBillingQue() {
            object[] results = this.Invoke("GetBillingQue", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBillingQueAsync() {
            this.GetBillingQueAsync(null);
        }
        
        /// <remarks/>
        public void GetBillingQueAsync(object userState) {
            if ((this.GetBillingQueOperationCompleted == null)) {
                this.GetBillingQueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingQueOperationCompleted);
            }
            this.InvokeAsync("GetBillingQue", new object[0], this.GetBillingQueOperationCompleted, userState);
        }
        
        private void OnGetBillingQueOperationCompleted(object arg) {
            if ((this.GetBillingQueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingQueCompleted(this, new GetBillingQueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTest(string BranchId, string Regino) {
            object[] results = this.Invoke("GetTest", new object[] {
                        BranchId,
                        Regino});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestAsync(string BranchId, string Regino) {
            this.GetTestAsync(BranchId, Regino, null);
        }
        
        /// <remarks/>
        public void GetTestAsync(string BranchId, string Regino, object userState) {
            if ((this.GetTestOperationCompleted == null)) {
                this.GetTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestOperationCompleted);
            }
            this.InvokeAsync("GetTest", new object[] {
                        BranchId,
                        Regino}, this.GetTestOperationCompleted, userState);
        }
        
        private void OnGetTestOperationCompleted(object arg) {
            if ((this.GetTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestCompleted(this, new GetTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReportList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportList(string Id) {
            object[] results = this.Invoke("GetReportList", new object[] {
                        Id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportListAsync(string Id) {
            this.GetReportListAsync(Id, null);
        }
        
        /// <remarks/>
        public void GetReportListAsync(string Id, object userState) {
            if ((this.GetReportListOperationCompleted == null)) {
                this.GetReportListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportListOperationCompleted);
            }
            this.InvokeAsync("GetReportList", new object[] {
                        Id}, this.GetReportListOperationCompleted, userState);
        }
        
        private void OnGetReportListOperationCompleted(object arg) {
            if ((this.GetReportListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportListCompleted(this, new GetReportListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadReport(string Id, string ReportName, string Report, string extension) {
            object[] results = this.Invoke("UploadReport", new object[] {
                        Id,
                        ReportName,
                        Report,
                        extension});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadReportAsync(string Id, string ReportName, string Report, string extension) {
            this.UploadReportAsync(Id, ReportName, Report, extension, null);
        }
        
        /// <remarks/>
        public void UploadReportAsync(string Id, string ReportName, string Report, string extension, object userState) {
            if ((this.UploadReportOperationCompleted == null)) {
                this.UploadReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReportOperationCompleted);
            }
            this.InvokeAsync("UploadReport", new object[] {
                        Id,
                        ReportName,
                        Report,
                        extension}, this.UploadReportOperationCompleted, userState);
        }
        
        private void OnUploadReportOperationCompleted(object arg) {
            if ((this.UploadReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadReportCompleted(this, new UploadReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertEmployeeSwipes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertEmployeeSwipes(string EmpId, string DeviceUniqueNumber, string SwipeDateTime) {
            object[] results = this.Invoke("InsertEmployeeSwipes", new object[] {
                        EmpId,
                        DeviceUniqueNumber,
                        SwipeDateTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertEmployeeSwipesAsync(string EmpId, string DeviceUniqueNumber, string SwipeDateTime) {
            this.InsertEmployeeSwipesAsync(EmpId, DeviceUniqueNumber, SwipeDateTime, null);
        }
        
        /// <remarks/>
        public void InsertEmployeeSwipesAsync(string EmpId, string DeviceUniqueNumber, string SwipeDateTime, object userState) {
            if ((this.InsertEmployeeSwipesOperationCompleted == null)) {
                this.InsertEmployeeSwipesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertEmployeeSwipesOperationCompleted);
            }
            this.InvokeAsync("InsertEmployeeSwipes", new object[] {
                        EmpId,
                        DeviceUniqueNumber,
                        SwipeDateTime}, this.InsertEmployeeSwipesOperationCompleted, userState);
        }
        
        private void OnInsertEmployeeSwipesOperationCompleted(object arg) {
            if ((this.InsertEmployeeSwipesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertEmployeeSwipesCompleted(this, new InsertEmployeeSwipesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertBeaconDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertBeaconDetail(string MacId, string NameSpaceId, string InstanceId, string TxPower, string RSSI, string Distance, string LastUpdate, string RawData) {
            object[] results = this.Invoke("InsertBeaconDetail", new object[] {
                        MacId,
                        NameSpaceId,
                        InstanceId,
                        TxPower,
                        RSSI,
                        Distance,
                        LastUpdate,
                        RawData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertBeaconDetailAsync(string MacId, string NameSpaceId, string InstanceId, string TxPower, string RSSI, string Distance, string LastUpdate, string RawData) {
            this.InsertBeaconDetailAsync(MacId, NameSpaceId, InstanceId, TxPower, RSSI, Distance, LastUpdate, RawData, null);
        }
        
        /// <remarks/>
        public void InsertBeaconDetailAsync(string MacId, string NameSpaceId, string InstanceId, string TxPower, string RSSI, string Distance, string LastUpdate, string RawData, object userState) {
            if ((this.InsertBeaconDetailOperationCompleted == null)) {
                this.InsertBeaconDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBeaconDetailOperationCompleted);
            }
            this.InvokeAsync("InsertBeaconDetail", new object[] {
                        MacId,
                        NameSpaceId,
                        InstanceId,
                        TxPower,
                        RSSI,
                        Distance,
                        LastUpdate,
                        RawData}, this.InsertBeaconDetailOperationCompleted, userState);
        }
        
        private void OnInsertBeaconDetailOperationCompleted(object arg) {
            if ((this.InsertBeaconDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBeaconDetailCompleted(this, new InsertBeaconDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoctorLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoctorLogin(string Username, string Password) {
            object[] results = this.Invoke("DoctorLogin", new object[] {
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoctorLoginAsync(string Username, string Password) {
            this.DoctorLoginAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void DoctorLoginAsync(string Username, string Password, object userState) {
            if ((this.DoctorLoginOperationCompleted == null)) {
                this.DoctorLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoctorLoginOperationCompleted);
            }
            this.InvokeAsync("DoctorLogin", new object[] {
                        Username,
                        Password}, this.DoctorLoginOperationCompleted, userState);
        }
        
        private void OnDoctorLoginOperationCompleted(object arg) {
            if ((this.DoctorLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoctorLoginCompleted(this, new DoctorLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchByRegistration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchByRegistration(int RegiNo, string BranchId) {
            object[] results = this.Invoke("SearchByRegistration", new object[] {
                        RegiNo,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchByRegistrationAsync(int RegiNo, string BranchId) {
            this.SearchByRegistrationAsync(RegiNo, BranchId, null);
        }
        
        /// <remarks/>
        public void SearchByRegistrationAsync(int RegiNo, string BranchId, object userState) {
            if ((this.SearchByRegistrationOperationCompleted == null)) {
                this.SearchByRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchByRegistrationOperationCompleted);
            }
            this.InvokeAsync("SearchByRegistration", new object[] {
                        RegiNo,
                        BranchId}, this.SearchByRegistrationOperationCompleted, userState);
        }
        
        private void OnSearchByRegistrationOperationCompleted(object arg) {
            if ((this.SearchByRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchByRegistrationCompleted(this, new SearchByRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMedicineName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMedicineName(string prefixText) {
            object[] results = this.Invoke("GetMedicineName", new object[] {
                        prefixText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMedicineNameAsync(string prefixText) {
            this.GetMedicineNameAsync(prefixText, null);
        }
        
        /// <remarks/>
        public void GetMedicineNameAsync(string prefixText, object userState) {
            if ((this.GetMedicineNameOperationCompleted == null)) {
                this.GetMedicineNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMedicineNameOperationCompleted);
            }
            this.InvokeAsync("GetMedicineName", new object[] {
                        prefixText}, this.GetMedicineNameOperationCompleted, userState);
        }
        
        private void OnGetMedicineNameOperationCompleted(object arg) {
            if ((this.GetMedicineNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMedicineNameCompleted(this, new GetMedicineNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInstructions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInstructions() {
            object[] results = this.Invoke("GetInstructions", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstructionsAsync() {
            this.GetInstructionsAsync(null);
        }
        
        /// <remarks/>
        public void GetInstructionsAsync(object userState) {
            if ((this.GetInstructionsOperationCompleted == null)) {
                this.GetInstructionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstructionsOperationCompleted);
            }
            this.InvokeAsync("GetInstructions", new object[0], this.GetInstructionsOperationCompleted, userState);
        }
        
        private void OnGetInstructionsOperationCompleted(object arg) {
            if ((this.GetInstructionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstructionsCompleted(this, new GetInstructionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMedicineName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertMedicineName(string Mediname) {
            object[] results = this.Invoke("InsertMedicineName", new object[] {
                        Mediname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMedicineNameAsync(string Mediname) {
            this.InsertMedicineNameAsync(Mediname, null);
        }
        
        /// <remarks/>
        public void InsertMedicineNameAsync(string Mediname, object userState) {
            if ((this.InsertMedicineNameOperationCompleted == null)) {
                this.InsertMedicineNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMedicineNameOperationCompleted);
            }
            this.InvokeAsync("InsertMedicineName", new object[] {
                        Mediname}, this.InsertMedicineNameOperationCompleted, userState);
        }
        
        private void OnInsertMedicineNameOperationCompleted(object arg) {
            if ((this.InsertMedicineNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMedicineNameCompleted(this, new InsertMedicineNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPrescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPrescription(string MedicineName, string InstructionName, int Days, string Qty, string OPDNO, int AppEntryID, int BranchId, string PrescDate, string notes, string Diagnosis) {
            object[] results = this.Invoke("InsertPrescription", new object[] {
                        MedicineName,
                        InstructionName,
                        Days,
                        Qty,
                        OPDNO,
                        AppEntryID,
                        BranchId,
                        PrescDate,
                        notes,
                        Diagnosis});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPrescriptionAsync(string MedicineName, string InstructionName, int Days, string Qty, string OPDNO, int AppEntryID, int BranchId, string PrescDate, string notes, string Diagnosis) {
            this.InsertPrescriptionAsync(MedicineName, InstructionName, Days, Qty, OPDNO, AppEntryID, BranchId, PrescDate, notes, Diagnosis, null);
        }
        
        /// <remarks/>
        public void InsertPrescriptionAsync(string MedicineName, string InstructionName, int Days, string Qty, string OPDNO, int AppEntryID, int BranchId, string PrescDate, string notes, string Diagnosis, object userState) {
            if ((this.InsertPrescriptionOperationCompleted == null)) {
                this.InsertPrescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPrescriptionOperationCompleted);
            }
            this.InvokeAsync("InsertPrescription", new object[] {
                        MedicineName,
                        InstructionName,
                        Days,
                        Qty,
                        OPDNO,
                        AppEntryID,
                        BranchId,
                        PrescDate,
                        notes,
                        Diagnosis}, this.InsertPrescriptionOperationCompleted, userState);
        }
        
        private void OnInsertPrescriptionOperationCompleted(object arg) {
            if ((this.InsertPrescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPrescriptionCompleted(this, new InsertPrescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetByRegiNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetByRegiNo(int RegiNo, string AppDate, string Docid) {
            object[] results = this.Invoke("GetByRegiNo", new object[] {
                        RegiNo,
                        AppDate,
                        Docid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetByRegiNoAsync(int RegiNo, string AppDate, string Docid) {
            this.GetByRegiNoAsync(RegiNo, AppDate, Docid, null);
        }
        
        /// <remarks/>
        public void GetByRegiNoAsync(int RegiNo, string AppDate, string Docid, object userState) {
            if ((this.GetByRegiNoOperationCompleted == null)) {
                this.GetByRegiNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetByRegiNoOperationCompleted);
            }
            this.InvokeAsync("GetByRegiNo", new object[] {
                        RegiNo,
                        AppDate,
                        Docid}, this.GetByRegiNoOperationCompleted, userState);
        }
        
        private void OnGetByRegiNoOperationCompleted(object arg) {
            if ((this.GetByRegiNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetByRegiNoCompleted(this, new GetByRegiNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientListForAdvanceQueue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientListForAdvanceQueue(string BranchId, string AppointmentDate, string DocId) {
            object[] results = this.Invoke("GetPatientListForAdvanceQueue", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientListForAdvanceQueueAsync(string BranchId, string AppointmentDate, string DocId) {
            this.GetPatientListForAdvanceQueueAsync(BranchId, AppointmentDate, DocId, null);
        }
        
        /// <remarks/>
        public void GetPatientListForAdvanceQueueAsync(string BranchId, string AppointmentDate, string DocId, object userState) {
            if ((this.GetPatientListForAdvanceQueueOperationCompleted == null)) {
                this.GetPatientListForAdvanceQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientListForAdvanceQueueOperationCompleted);
            }
            this.InvokeAsync("GetPatientListForAdvanceQueue", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId}, this.GetPatientListForAdvanceQueueOperationCompleted, userState);
        }
        
        private void OnGetPatientListForAdvanceQueueOperationCompleted(object arg) {
            if ((this.GetPatientListForAdvanceQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientListForAdvanceQueueCompleted(this, new GetPatientListForAdvanceQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdvanceQueUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdvanceQueUpdate(string AppId) {
            object[] results = this.Invoke("AdvanceQueUpdate", new object[] {
                        AppId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdvanceQueUpdateAsync(string AppId) {
            this.AdvanceQueUpdateAsync(AppId, null);
        }
        
        /// <remarks/>
        public void AdvanceQueUpdateAsync(string AppId, object userState) {
            if ((this.AdvanceQueUpdateOperationCompleted == null)) {
                this.AdvanceQueUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvanceQueUpdateOperationCompleted);
            }
            this.InvokeAsync("AdvanceQueUpdate", new object[] {
                        AppId}, this.AdvanceQueUpdateOperationCompleted, userState);
        }
        
        private void OnAdvanceQueUpdateOperationCompleted(object arg) {
            if ((this.AdvanceQueUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvanceQueUpdateCompleted(this, new AdvanceQueUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientListbylistofobjects", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Patientlist[] GetPatientListbylistofobjects(string BranchId, string AppointmentDate, string DocId) {
            object[] results = this.Invoke("GetPatientListbylistofobjects", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId});
            return ((Patientlist[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientListbylistofobjectsAsync(string BranchId, string AppointmentDate, string DocId) {
            this.GetPatientListbylistofobjectsAsync(BranchId, AppointmentDate, DocId, null);
        }
        
        /// <remarks/>
        public void GetPatientListbylistofobjectsAsync(string BranchId, string AppointmentDate, string DocId, object userState) {
            if ((this.GetPatientListbylistofobjectsOperationCompleted == null)) {
                this.GetPatientListbylistofobjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientListbylistofobjectsOperationCompleted);
            }
            this.InvokeAsync("GetPatientListbylistofobjects", new object[] {
                        BranchId,
                        AppointmentDate,
                        DocId}, this.GetPatientListbylistofobjectsOperationCompleted, userState);
        }
        
        private void OnGetPatientListbylistofobjectsOperationCompleted(object arg) {
            if ((this.GetPatientListbylistofobjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientListbylistofobjectsCompleted(this, new GetPatientListbylistofobjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReport(string PatientId, string BranchId) {
            object[] results = this.Invoke("GetReport", new object[] {
                        PatientId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportAsync(string PatientId, string BranchId) {
            this.GetReportAsync(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetReportAsync(string PatientId, string BranchId, object userState) {
            if ((this.GetReportOperationCompleted == null)) {
                this.GetReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportOperationCompleted);
            }
            this.InvokeAsync("GetReport", new object[] {
                        PatientId,
                        BranchId}, this.GetReportOperationCompleted, userState);
        }
        
        private void OnGetReportOperationCompleted(object arg) {
            if ((this.GetReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportCompleted(this, new GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/gethospitalnamebylistofobject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public hospitallist[] gethospitalnamebylistofobject(string Docid) {
            object[] results = this.Invoke("gethospitalnamebylistofobject", new object[] {
                        Docid});
            return ((hospitallist[])(results[0]));
        }
        
        /// <remarks/>
        public void gethospitalnamebylistofobjectAsync(string Docid) {
            this.gethospitalnamebylistofobjectAsync(Docid, null);
        }
        
        /// <remarks/>
        public void gethospitalnamebylistofobjectAsync(string Docid, object userState) {
            if ((this.gethospitalnamebylistofobjectOperationCompleted == null)) {
                this.gethospitalnamebylistofobjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OngethospitalnamebylistofobjectOperationCompleted);
            }
            this.InvokeAsync("gethospitalnamebylistofobject", new object[] {
                        Docid}, this.gethospitalnamebylistofobjectOperationCompleted, userState);
        }
        
        private void OngethospitalnamebylistofobjectOperationCompleted(object arg) {
            if ((this.gethospitalnamebylistofobjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.gethospitalnamebylistofobjectCompleted(this, new gethospitalnamebylistofobjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Saveprescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Saveprescription(string opdno, string appDate, string BranchID, string APPID, string[] medicinename) {
            object[] results = this.Invoke("Saveprescription", new object[] {
                        opdno,
                        appDate,
                        BranchID,
                        APPID,
                        medicinename});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveprescriptionAsync(string opdno, string appDate, string BranchID, string APPID, string[] medicinename) {
            this.SaveprescriptionAsync(opdno, appDate, BranchID, APPID, medicinename, null);
        }
        
        /// <remarks/>
        public void SaveprescriptionAsync(string opdno, string appDate, string BranchID, string APPID, string[] medicinename, object userState) {
            if ((this.SaveprescriptionOperationCompleted == null)) {
                this.SaveprescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveprescriptionOperationCompleted);
            }
            this.InvokeAsync("Saveprescription", new object[] {
                        opdno,
                        appDate,
                        BranchID,
                        APPID,
                        medicinename}, this.SaveprescriptionOperationCompleted, userState);
        }
        
        private void OnSaveprescriptionOperationCompleted(object arg) {
            if ((this.SaveprescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveprescriptionCompleted(this, new SaveprescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDoctorImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDoctorImage(string DocId, int BranchId) {
            object[] results = this.Invoke("GetDoctorImage", new object[] {
                        DocId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDoctorImageAsync(string DocId, int BranchId) {
            this.GetDoctorImageAsync(DocId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetDoctorImageAsync(string DocId, int BranchId, object userState) {
            if ((this.GetDoctorImageOperationCompleted == null)) {
                this.GetDoctorImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDoctorImageOperationCompleted);
            }
            this.InvokeAsync("GetDoctorImage", new object[] {
                        DocId,
                        BranchId}, this.GetDoctorImageOperationCompleted, userState);
        }
        
        private void OnGetDoctorImageOperationCompleted(object arg) {
            if ((this.GetDoctorImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDoctorImageCompleted(this, new GetDoctorImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientImage1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientImage1(string PatientId, string BranchId) {
            object[] results = this.Invoke("GetPatientImage1", new object[] {
                        PatientId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientImage1Async(string PatientId, string BranchId) {
            this.GetPatientImage1Async(PatientId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetPatientImage1Async(string PatientId, string BranchId, object userState) {
            if ((this.GetPatientImage1OperationCompleted == null)) {
                this.GetPatientImage1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientImage1OperationCompleted);
            }
            this.InvokeAsync("GetPatientImage1", new object[] {
                        PatientId,
                        BranchId}, this.GetPatientImage1OperationCompleted, userState);
        }
        
        private void OnGetPatientImage1OperationCompleted(object arg) {
            if ((this.GetPatientImage1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientImage1Completed(this, new GetPatientImage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrescriptionDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPrescriptionDetails(string ClientID, int BranchID) {
            object[] results = this.Invoke("GetPrescriptionDetails", new object[] {
                        ClientID,
                        BranchID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrescriptionDetailsAsync(string ClientID, int BranchID) {
            this.GetPrescriptionDetailsAsync(ClientID, BranchID, null);
        }
        
        /// <remarks/>
        public void GetPrescriptionDetailsAsync(string ClientID, int BranchID, object userState) {
            if ((this.GetPrescriptionDetailsOperationCompleted == null)) {
                this.GetPrescriptionDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrescriptionDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPrescriptionDetails", new object[] {
                        ClientID,
                        BranchID}, this.GetPrescriptionDetailsOperationCompleted, userState);
        }
        
        private void OnGetPrescriptionDetailsOperationCompleted(object arg) {
            if ((this.GetPrescriptionDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrescriptionDetailsCompleted(this, new GetPrescriptionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReport1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReport1(string GuestId, string BranchId) {
            object[] results = this.Invoke("GetReport1", new object[] {
                        GuestId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReport1Async(string GuestId, string BranchId) {
            this.GetReport1Async(GuestId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetReport1Async(string GuestId, string BranchId, object userState) {
            if ((this.GetReport1OperationCompleted == null)) {
                this.GetReport1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReport1OperationCompleted);
            }
            this.InvokeAsync("GetReport1", new object[] {
                        GuestId,
                        BranchId}, this.GetReport1OperationCompleted, userState);
        }
        
        private void OnGetReport1OperationCompleted(object arg) {
            if ((this.GetReport1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReport1Completed(this, new GetReport1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HealthTips1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HealthTips1(string BranchId) {
            object[] results = this.Invoke("HealthTips1", new object[] {
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HealthTips1Async(string BranchId) {
            this.HealthTips1Async(BranchId, null);
        }
        
        /// <remarks/>
        public void HealthTips1Async(string BranchId, object userState) {
            if ((this.HealthTips1OperationCompleted == null)) {
                this.HealthTips1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnHealthTips1OperationCompleted);
            }
            this.InvokeAsync("HealthTips1", new object[] {
                        BranchId}, this.HealthTips1OperationCompleted, userState);
        }
        
        private void OnHealthTips1OperationCompleted(object arg) {
            if ((this.HealthTips1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HealthTips1Completed(this, new HealthTips1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login1(string Username, string Password) {
            object[] results = this.Invoke("Login1", new object[] {
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Login1Async(string Username, string Password) {
            this.Login1Async(Username, Password, null);
        }
        
        /// <remarks/>
        public void Login1Async(string Username, string Password, object userState) {
            if ((this.Login1OperationCompleted == null)) {
                this.Login1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogin1OperationCompleted);
            }
            this.InvokeAsync("Login1", new object[] {
                        Username,
                        Password}, this.Login1OperationCompleted, userState);
        }
        
        private void OnLogin1OperationCompleted(object arg) {
            if ((this.Login1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Login1Completed(this, new Login1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HealthTipsImageById1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HealthTipsImageById1(string TipsId) {
            object[] results = this.Invoke("HealthTipsImageById1", new object[] {
                        TipsId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HealthTipsImageById1Async(string TipsId) {
            this.HealthTipsImageById1Async(TipsId, null);
        }
        
        /// <remarks/>
        public void HealthTipsImageById1Async(string TipsId, object userState) {
            if ((this.HealthTipsImageById1OperationCompleted == null)) {
                this.HealthTipsImageById1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnHealthTipsImageById1OperationCompleted);
            }
            this.InvokeAsync("HealthTipsImageById1", new object[] {
                        TipsId}, this.HealthTipsImageById1OperationCompleted, userState);
        }
        
        private void OnHealthTipsImageById1OperationCompleted(object arg) {
            if ((this.HealthTipsImageById1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HealthTipsImageById1Completed(this, new HealthTipsImageById1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReportinPdf1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReportinPdf1(string ID) {
            object[] results = this.Invoke("GetReportinPdf1", new object[] {
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportinPdf1Async(string ID) {
            this.GetReportinPdf1Async(ID, null);
        }
        
        /// <remarks/>
        public void GetReportinPdf1Async(string ID, object userState) {
            if ((this.GetReportinPdf1OperationCompleted == null)) {
                this.GetReportinPdf1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportinPdf1OperationCompleted);
            }
            this.InvokeAsync("GetReportinPdf1", new object[] {
                        ID}, this.GetReportinPdf1OperationCompleted, userState);
        }
        
        private void OnGetReportinPdf1OperationCompleted(object arg) {
            if ((this.GetReportinPdf1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportinPdf1Completed(this, new GetReportinPdf1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppoinmentList1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AppoinmentList1(string ClientId, string BranchId, string SpecialistId) {
            object[] results = this.Invoke("AppoinmentList1", new object[] {
                        ClientId,
                        BranchId,
                        SpecialistId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AppoinmentList1Async(string ClientId, string BranchId, string SpecialistId) {
            this.AppoinmentList1Async(ClientId, BranchId, SpecialistId, null);
        }
        
        /// <remarks/>
        public void AppoinmentList1Async(string ClientId, string BranchId, string SpecialistId, object userState) {
            if ((this.AppoinmentList1OperationCompleted == null)) {
                this.AppoinmentList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppoinmentList1OperationCompleted);
            }
            this.InvokeAsync("AppoinmentList1", new object[] {
                        ClientId,
                        BranchId,
                        SpecialistId}, this.AppoinmentList1OperationCompleted, userState);
        }
        
        private void OnAppoinmentList1OperationCompleted(object arg) {
            if ((this.AppoinmentList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppoinmentList1Completed(this, new AppoinmentList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelAppointment1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelAppointment1(string AppointmentId, string BranchId, string DocId, string AppointmentDate) {
            object[] results = this.Invoke("CancelAppointment1", new object[] {
                        AppointmentId,
                        BranchId,
                        DocId,
                        AppointmentDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAppointment1Async(string AppointmentId, string BranchId, string DocId, string AppointmentDate) {
            this.CancelAppointment1Async(AppointmentId, BranchId, DocId, AppointmentDate, null);
        }
        
        /// <remarks/>
        public void CancelAppointment1Async(string AppointmentId, string BranchId, string DocId, string AppointmentDate, object userState) {
            if ((this.CancelAppointment1OperationCompleted == null)) {
                this.CancelAppointment1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAppointment1OperationCompleted);
            }
            this.InvokeAsync("CancelAppointment1", new object[] {
                        AppointmentId,
                        BranchId,
                        DocId,
                        AppointmentDate}, this.CancelAppointment1OperationCompleted, userState);
        }
        
        private void OnCancelAppointment1OperationCompleted(object arg) {
            if ((this.CancelAppointment1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAppointment1Completed(this, new CancelAppointment1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BookAppointment1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BookAppointment1(string ClientId, string Time, string BranchId, string DocId, string AppointmentDate, string IsConsultation, string UPIID, string PaymentMode) {
            object[] results = this.Invoke("BookAppointment1", new object[] {
                        ClientId,
                        Time,
                        BranchId,
                        DocId,
                        AppointmentDate,
                        IsConsultation,
                        UPIID,
                        PaymentMode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BookAppointment1Async(string ClientId, string Time, string BranchId, string DocId, string AppointmentDate, string IsConsultation, string UPIID, string PaymentMode) {
            this.BookAppointment1Async(ClientId, Time, BranchId, DocId, AppointmentDate, IsConsultation, UPIID, PaymentMode, null);
        }
        
        /// <remarks/>
        public void BookAppointment1Async(string ClientId, string Time, string BranchId, string DocId, string AppointmentDate, string IsConsultation, string UPIID, string PaymentMode, object userState) {
            if ((this.BookAppointment1OperationCompleted == null)) {
                this.BookAppointment1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnBookAppointment1OperationCompleted);
            }
            this.InvokeAsync("BookAppointment1", new object[] {
                        ClientId,
                        Time,
                        BranchId,
                        DocId,
                        AppointmentDate,
                        IsConsultation,
                        UPIID,
                        PaymentMode}, this.BookAppointment1OperationCompleted, userState);
        }
        
        private void OnBookAppointment1OperationCompleted(object arg) {
            if ((this.BookAppointment1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BookAppointment1Completed(this, new BookAppointment1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoctorTimeSlot1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoctorTimeSlot1(string DocId, string Days, string BranchId, string Date) {
            object[] results = this.Invoke("DoctorTimeSlot1", new object[] {
                        DocId,
                        Days,
                        BranchId,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoctorTimeSlot1Async(string DocId, string Days, string BranchId, string Date) {
            this.DoctorTimeSlot1Async(DocId, Days, BranchId, Date, null);
        }
        
        /// <remarks/>
        public void DoctorTimeSlot1Async(string DocId, string Days, string BranchId, string Date, object userState) {
            if ((this.DoctorTimeSlot1OperationCompleted == null)) {
                this.DoctorTimeSlot1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoctorTimeSlot1OperationCompleted);
            }
            this.InvokeAsync("DoctorTimeSlot1", new object[] {
                        DocId,
                        Days,
                        BranchId,
                        Date}, this.DoctorTimeSlot1OperationCompleted, userState);
        }
        
        private void OnDoctorTimeSlot1OperationCompleted(object arg) {
            if ((this.DoctorTimeSlot1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoctorTimeSlot1Completed(this, new DoctorTimeSlot1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EditProfile1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EditProfile1(string username, string password, string Regino, string OldPassword) {
            object[] results = this.Invoke("EditProfile1", new object[] {
                        username,
                        password,
                        Regino,
                        OldPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditProfile1Async(string username, string password, string Regino, string OldPassword) {
            this.EditProfile1Async(username, password, Regino, OldPassword, null);
        }
        
        /// <remarks/>
        public void EditProfile1Async(string username, string password, string Regino, string OldPassword, object userState) {
            if ((this.EditProfile1OperationCompleted == null)) {
                this.EditProfile1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditProfile1OperationCompleted);
            }
            this.InvokeAsync("EditProfile1", new object[] {
                        username,
                        password,
                        Regino,
                        OldPassword}, this.EditProfile1OperationCompleted, userState);
        }
        
        private void OnEditProfile1OperationCompleted(object arg) {
            if ((this.EditProfile1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditProfile1Completed(this, new EditProfile1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePassword(string username, string password, string Regino, string OldPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        username,
                        password,
                        Regino,
                        OldPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string username, string password, string Regino, string OldPassword) {
            this.ChangePasswordAsync(username, password, Regino, OldPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string username, string password, string Regino, string OldPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        username,
                        password,
                        Regino,
                        OldPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProfileDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProfileDetails(int RegiNo, int BranchId) {
            object[] results = this.Invoke("GetProfileDetails", new object[] {
                        RegiNo,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProfileDetailsAsync(int RegiNo, int BranchId) {
            this.GetProfileDetailsAsync(RegiNo, BranchId, null);
        }
        
        /// <remarks/>
        public void GetProfileDetailsAsync(int RegiNo, int BranchId, object userState) {
            if ((this.GetProfileDetailsOperationCompleted == null)) {
                this.GetProfileDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProfileDetailsOperationCompleted);
            }
            this.InvokeAsync("GetProfileDetails", new object[] {
                        RegiNo,
                        BranchId}, this.GetProfileDetailsOperationCompleted, userState);
        }
        
        private void OnGetProfileDetailsOperationCompleted(object arg) {
            if ((this.GetProfileDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProfileDetailsCompleted(this, new GetProfileDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProfile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateProfile(int RegiNo, int BranchId, string Address) {
            object[] results = this.Invoke("UpdateProfile", new object[] {
                        RegiNo,
                        BranchId,
                        Address});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProfileAsync(int RegiNo, int BranchId, string Address) {
            this.UpdateProfileAsync(RegiNo, BranchId, Address, null);
        }
        
        /// <remarks/>
        public void UpdateProfileAsync(int RegiNo, int BranchId, string Address, object userState) {
            if ((this.UpdateProfileOperationCompleted == null)) {
                this.UpdateProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProfileOperationCompleted);
            }
            this.InvokeAsync("UpdateProfile", new object[] {
                        RegiNo,
                        BranchId,
                        Address}, this.UpdateProfileOperationCompleted, userState);
        }
        
        private void OnUpdateProfileOperationCompleted(object arg) {
            if ((this.UpdateProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProfileCompleted(this, new UpdateProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePhoto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePhoto(string RegiNo, int BranchId, string Image) {
            object[] results = this.Invoke("UpdatePhoto", new object[] {
                        RegiNo,
                        BranchId,
                        Image});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePhotoAsync(string RegiNo, int BranchId, string Image) {
            this.UpdatePhotoAsync(RegiNo, BranchId, Image, null);
        }
        
        /// <remarks/>
        public void UpdatePhotoAsync(string RegiNo, int BranchId, string Image, object userState) {
            if ((this.UpdatePhotoOperationCompleted == null)) {
                this.UpdatePhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePhotoOperationCompleted);
            }
            this.InvokeAsync("UpdatePhoto", new object[] {
                        RegiNo,
                        BranchId,
                        Image}, this.UpdatePhotoOperationCompleted, userState);
        }
        
        private void OnUpdatePhotoOperationCompleted(object arg) {
            if ((this.UpdatePhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePhotoCompleted(this, new UpdatePhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ForGotPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ForGotPassword(string emailid) {
            object[] results = this.Invoke("ForGotPassword", new object[] {
                        emailid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ForGotPasswordAsync(string emailid) {
            this.ForGotPasswordAsync(emailid, null);
        }
        
        /// <remarks/>
        public void ForGotPasswordAsync(string emailid, object userState) {
            if ((this.ForGotPasswordOperationCompleted == null)) {
                this.ForGotPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForGotPasswordOperationCompleted);
            }
            this.InvokeAsync("ForGotPassword", new object[] {
                        emailid}, this.ForGotPasswordOperationCompleted, userState);
        }
        
        private void OnForGotPasswordOperationCompleted(object arg) {
            if ((this.ForGotPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForGotPasswordCompleted(this, new ForGotPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintPrescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintPrescription(string clientId, int BranchId, int AppointmentId) {
            object[] results = this.Invoke("PrintPrescription", new object[] {
                        clientId,
                        BranchId,
                        AppointmentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintPrescriptionAsync(string clientId, int BranchId, int AppointmentId) {
            this.PrintPrescriptionAsync(clientId, BranchId, AppointmentId, null);
        }
        
        /// <remarks/>
        public void PrintPrescriptionAsync(string clientId, int BranchId, int AppointmentId, object userState) {
            if ((this.PrintPrescriptionOperationCompleted == null)) {
                this.PrintPrescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintPrescriptionOperationCompleted);
            }
            this.InvokeAsync("PrintPrescription", new object[] {
                        clientId,
                        BranchId,
                        AppointmentId}, this.PrintPrescriptionOperationCompleted, userState);
        }
        
        private void OnPrintPrescriptionOperationCompleted(object arg) {
            if ((this.PrintPrescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintPrescriptionCompleted(this, new PrintPrescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillSpecialisation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FillSpecialisation(int BranchId) {
            object[] results = this.Invoke("FillSpecialisation", new object[] {
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FillSpecialisationAsync(int BranchId) {
            this.FillSpecialisationAsync(BranchId, null);
        }
        
        /// <remarks/>
        public void FillSpecialisationAsync(int BranchId, object userState) {
            if ((this.FillSpecialisationOperationCompleted == null)) {
                this.FillSpecialisationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillSpecialisationOperationCompleted);
            }
            this.InvokeAsync("FillSpecialisation", new object[] {
                        BranchId}, this.FillSpecialisationOperationCompleted, userState);
        }
        
        private void OnFillSpecialisationOperationCompleted(object arg) {
            if ((this.FillSpecialisationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillSpecialisationCompleted(this, new FillSpecialisationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillDoctorList1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FillDoctorList1(string BranchId, string specialist) {
            object[] results = this.Invoke("FillDoctorList1", new object[] {
                        BranchId,
                        specialist});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FillDoctorList1Async(string BranchId, string specialist) {
            this.FillDoctorList1Async(BranchId, specialist, null);
        }
        
        /// <remarks/>
        public void FillDoctorList1Async(string BranchId, string specialist, object userState) {
            if ((this.FillDoctorList1OperationCompleted == null)) {
                this.FillDoctorList1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDoctorList1OperationCompleted);
            }
            this.InvokeAsync("FillDoctorList1", new object[] {
                        BranchId,
                        specialist}, this.FillDoctorList1OperationCompleted, userState);
        }
        
        private void OnFillDoctorList1OperationCompleted(object arg) {
            if ((this.FillDoctorList1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDoctorList1Completed(this, new FillDoctorList1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConsultationCharges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConsultationCharges(string DocId, string BranchId) {
            object[] results = this.Invoke("GetConsultationCharges", new object[] {
                        DocId,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConsultationChargesAsync(string DocId, string BranchId) {
            this.GetConsultationChargesAsync(DocId, BranchId, null);
        }
        
        /// <remarks/>
        public void GetConsultationChargesAsync(string DocId, string BranchId, object userState) {
            if ((this.GetConsultationChargesOperationCompleted == null)) {
                this.GetConsultationChargesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConsultationChargesOperationCompleted);
            }
            this.InvokeAsync("GetConsultationCharges", new object[] {
                        DocId,
                        BranchId}, this.GetConsultationChargesOperationCompleted, userState);
        }
        
        private void OnGetConsultationChargesOperationCompleted(object arg) {
            if ((this.GetConsultationChargesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConsultationChargesCompleted(this, new GetConsultationChargesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDocument(string PatientID, string DocumentType, string DocumentName, string DocumentExtension, [System.Xml.Serialization.XmlElementAttribute("UploadDocument")] string UploadDocument1, string BranchID) {
            object[] results = this.Invoke("UploadDocument", new object[] {
                        PatientID,
                        DocumentType,
                        DocumentName,
                        DocumentExtension,
                        UploadDocument1,
                        BranchID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentAsync(string PatientID, string DocumentType, string DocumentName, string DocumentExtension, string UploadDocument1, string BranchID) {
            this.UploadDocumentAsync(PatientID, DocumentType, DocumentName, DocumentExtension, UploadDocument1, BranchID, null);
        }
        
        /// <remarks/>
        public void UploadDocumentAsync(string PatientID, string DocumentType, string DocumentName, string DocumentExtension, string UploadDocument1, string BranchID, object userState) {
            if ((this.UploadDocumentOperationCompleted == null)) {
                this.UploadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentOperationCompleted);
            }
            this.InvokeAsync("UploadDocument", new object[] {
                        PatientID,
                        DocumentType,
                        DocumentName,
                        DocumentExtension,
                        UploadDocument1,
                        BranchID}, this.UploadDocumentOperationCompleted, userState);
        }
        
        private void OnUploadDocumentOperationCompleted(object arg) {
            if ((this.UploadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentCompleted(this, new UploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveVitalData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveVitalData(string OPDNo, string Weight, string height, string BPsystolic, string BPDistolic, string Pulse, string BMI, string BranchId) {
            object[] results = this.Invoke("SaveVitalData", new object[] {
                        OPDNo,
                        Weight,
                        height,
                        BPsystolic,
                        BPDistolic,
                        Pulse,
                        BMI,
                        BranchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveVitalDataAsync(string OPDNo, string Weight, string height, string BPsystolic, string BPDistolic, string Pulse, string BMI, string BranchId) {
            this.SaveVitalDataAsync(OPDNo, Weight, height, BPsystolic, BPDistolic, Pulse, BMI, BranchId, null);
        }
        
        /// <remarks/>
        public void SaveVitalDataAsync(string OPDNo, string Weight, string height, string BPsystolic, string BPDistolic, string Pulse, string BMI, string BranchId, object userState) {
            if ((this.SaveVitalDataOperationCompleted == null)) {
                this.SaveVitalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVitalDataOperationCompleted);
            }
            this.InvokeAsync("SaveVitalData", new object[] {
                        OPDNo,
                        Weight,
                        height,
                        BPsystolic,
                        BPDistolic,
                        Pulse,
                        BMI,
                        BranchId}, this.SaveVitalDataOperationCompleted, userState);
        }
        
        private void OnSaveVitalDataOperationCompleted(object arg) {
            if ((this.SaveVitalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVitalDataCompleted(this, new SaveVitalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppointmentDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppointmentDetails(string BranchId, string DoctorId, string FromDate, string ToDate) {
            object[] results = this.Invoke("GetAppointmentDetails", new object[] {
                        BranchId,
                        DoctorId,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppointmentDetailsAsync(string BranchId, string DoctorId, string FromDate, string ToDate) {
            this.GetAppointmentDetailsAsync(BranchId, DoctorId, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetAppointmentDetailsAsync(string BranchId, string DoctorId, string FromDate, string ToDate, object userState) {
            if ((this.GetAppointmentDetailsOperationCompleted == null)) {
                this.GetAppointmentDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppointmentDetailsOperationCompleted);
            }
            this.InvokeAsync("GetAppointmentDetails", new object[] {
                        BranchId,
                        DoctorId,
                        FromDate,
                        ToDate}, this.GetAppointmentDetailsOperationCompleted, userState);
        }
        
        private void OnGetAppointmentDetailsOperationCompleted(object arg) {
            if ((this.GetAppointmentDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppointmentDetailsCompleted(this, new GetAppointmentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVitalDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVitalDetails(string PatientID, string FromDate, string ToDate) {
            object[] results = this.Invoke("GetVitalDetails", new object[] {
                        PatientID,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVitalDetailsAsync(string PatientID, string FromDate, string ToDate) {
            this.GetVitalDetailsAsync(PatientID, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetVitalDetailsAsync(string PatientID, string FromDate, string ToDate, object userState) {
            if ((this.GetVitalDetailsOperationCompleted == null)) {
                this.GetVitalDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVitalDetailsOperationCompleted);
            }
            this.InvokeAsync("GetVitalDetails", new object[] {
                        PatientID,
                        FromDate,
                        ToDate}, this.GetVitalDetailsOperationCompleted, userState);
        }
        
        private void OnGetVitalDetailsOperationCompleted(object arg) {
            if ((this.GetVitalDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVitalDetailsCompleted(this, new GetVitalDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSpecializationWiseCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSpecializationWiseCount(string PatientID, string BranchId, string FromDate, string ToDate) {
            object[] results = this.Invoke("GetSpecializationWiseCount", new object[] {
                        PatientID,
                        BranchId,
                        FromDate,
                        ToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSpecializationWiseCountAsync(string PatientID, string BranchId, string FromDate, string ToDate) {
            this.GetSpecializationWiseCountAsync(PatientID, BranchId, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetSpecializationWiseCountAsync(string PatientID, string BranchId, string FromDate, string ToDate, object userState) {
            if ((this.GetSpecializationWiseCountOperationCompleted == null)) {
                this.GetSpecializationWiseCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecializationWiseCountOperationCompleted);
            }
            this.InvokeAsync("GetSpecializationWiseCount", new object[] {
                        PatientID,
                        BranchId,
                        FromDate,
                        ToDate}, this.GetSpecializationWiseCountOperationCompleted, userState);
        }
        
        private void OnGetSpecializationWiseCountOperationCompleted(object arg) {
            if ((this.GetSpecializationWiseCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecializationWiseCountCompleted(this, new GetSpecializationWiseCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Patientlist {
        
        private string nameField;
        
        private string ageField;
        
        private string reginoField;
        
        private string appidField;
        
        private string appTimeField;
        
        private string isAppCompleteField;
        
        private string oPDNoField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string age {
            get {
                return this.ageField;
            }
            set {
                this.ageField = value;
            }
        }
        
        /// <remarks/>
        public string Regino {
            get {
                return this.reginoField;
            }
            set {
                this.reginoField = value;
            }
        }
        
        /// <remarks/>
        public string appid {
            get {
                return this.appidField;
            }
            set {
                this.appidField = value;
            }
        }
        
        /// <remarks/>
        public string AppTime {
            get {
                return this.appTimeField;
            }
            set {
                this.appTimeField = value;
            }
        }
        
        /// <remarks/>
        public string IsAppComplete {
            get {
                return this.isAppCompleteField;
            }
            set {
                this.isAppCompleteField = value;
            }
        }
        
        /// <remarks/>
        public string OPDNo {
            get {
                return this.oPDNoField;
            }
            set {
                this.oPDNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class hospitallist {
        
        private string branchidField;
        
        private string hospitalField;
        
        private string countField;
        
        /// <remarks/>
        public string Branchid {
            get {
                return this.branchidField;
            }
            set {
                this.branchidField = value;
            }
        }
        
        /// <remarks/>
        public string hospital {
            get {
                return this.hospitalField;
            }
            set {
                this.hospitalField = value;
            }
        }
        
        /// <remarks/>
        public string count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientImageCompletedEventHandler(object sender, GetPatientImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HospBulletinCompletedEventHandler(object sender, HospBulletinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HospBulletinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HospBulletinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HospBulletinImageByIdCompletedEventHandler(object sender, HospBulletinImageByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HospBulletinImageByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HospBulletinImageByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HealthTipsCompletedEventHandler(object sender, HealthTipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HealthTipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HealthTipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HealthTipsImageByIdCompletedEventHandler(object sender, HealthTipsImageByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HealthTipsImageByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HealthTipsImageByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PatientCountCompletedEventHandler(object sender, PatientCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PatientCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PatientCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PatientAdviceCompletedEventHandler(object sender, PatientAdviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PatientAdviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PatientAdviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PrescriptionCompletedEventHandler(object sender, PrescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FillDoctorListCompletedEventHandler(object sender, FillDoctorListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDoctorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDoctorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FillDoctorspecializationCompletedEventHandler(object sender, FillDoctorspecializationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDoctorspecializationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDoctorspecializationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DoctorTimeSlotCompletedEventHandler(object sender, DoctorTimeSlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoctorTimeSlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoctorTimeSlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BookAppointmentCompletedEventHandler(object sender, BookAppointmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookAppointmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookAppointmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AppoinmentListCompletedEventHandler(object sender, AppoinmentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppoinmentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppoinmentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FillExaminationListCompletedEventHandler(object sender, FillExaminationListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillExaminationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillExaminationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CancelAppointmentCompletedEventHandler(object sender, CancelAppointmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelAppointmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelAppointmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getuploadimageCompletedEventHandler(object sender, getuploadimageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getuploadimageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getuploadimageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void gethospitalnameCompletedEventHandler(object sender, gethospitalnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class gethospitalnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal gethospitalnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientListCompletedEventHandler(object sender, GetPatientListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EditProfileCompletedEventHandler(object sender, EditProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getQueueCompletedEventHandler(object sender, getQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDoctorQueCompletedEventHandler(object sender, GetDoctorQueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorQueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorQueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBillingQueCompletedEventHandler(object sender, GetBillingQueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingQueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingQueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTestCompletedEventHandler(object sender, GetTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReportListCompletedEventHandler(object sender, GetReportListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadReportCompletedEventHandler(object sender, UploadReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertEmployeeSwipesCompletedEventHandler(object sender, InsertEmployeeSwipesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertEmployeeSwipesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertEmployeeSwipesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertBeaconDetailCompletedEventHandler(object sender, InsertBeaconDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBeaconDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertBeaconDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DoctorLoginCompletedEventHandler(object sender, DoctorLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoctorLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoctorLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SearchByRegistrationCompletedEventHandler(object sender, SearchByRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchByRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchByRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMedicineNameCompletedEventHandler(object sender, GetMedicineNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMedicineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMedicineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetInstructionsCompletedEventHandler(object sender, GetInstructionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstructionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstructionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertMedicineNameCompletedEventHandler(object sender, InsertMedicineNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMedicineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMedicineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void InsertPrescriptionCompletedEventHandler(object sender, InsertPrescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPrescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPrescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetByRegiNoCompletedEventHandler(object sender, GetByRegiNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetByRegiNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetByRegiNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientListForAdvanceQueueCompletedEventHandler(object sender, GetPatientListForAdvanceQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientListForAdvanceQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientListForAdvanceQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AdvanceQueUpdateCompletedEventHandler(object sender, AdvanceQueUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvanceQueUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvanceQueUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientListbylistofobjectsCompletedEventHandler(object sender, GetPatientListbylistofobjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientListbylistofobjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientListbylistofobjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Patientlist[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Patientlist[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReportCompletedEventHandler(object sender, GetReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void gethospitalnamebylistofobjectCompletedEventHandler(object sender, gethospitalnamebylistofobjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class gethospitalnamebylistofobjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal gethospitalnamebylistofobjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public hospitallist[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((hospitallist[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveprescriptionCompletedEventHandler(object sender, SaveprescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveprescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveprescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDoctorImageCompletedEventHandler(object sender, GetDoctorImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDoctorImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDoctorImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPatientImage1CompletedEventHandler(object sender, GetPatientImage1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientImage1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientImage1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPrescriptionDetailsCompletedEventHandler(object sender, GetPrescriptionDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrescriptionDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrescriptionDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReport1CompletedEventHandler(object sender, GetReport1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReport1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReport1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HealthTips1CompletedEventHandler(object sender, HealthTips1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HealthTips1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HealthTips1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Login1CompletedEventHandler(object sender, Login1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Login1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Login1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void HealthTipsImageById1CompletedEventHandler(object sender, HealthTipsImageById1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HealthTipsImageById1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HealthTipsImageById1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReportinPdf1CompletedEventHandler(object sender, GetReportinPdf1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportinPdf1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportinPdf1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AppoinmentList1CompletedEventHandler(object sender, AppoinmentList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppoinmentList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppoinmentList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CancelAppointment1CompletedEventHandler(object sender, CancelAppointment1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelAppointment1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelAppointment1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BookAppointment1CompletedEventHandler(object sender, BookAppointment1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BookAppointment1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BookAppointment1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DoctorTimeSlot1CompletedEventHandler(object sender, DoctorTimeSlot1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoctorTimeSlot1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoctorTimeSlot1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EditProfile1CompletedEventHandler(object sender, EditProfile1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditProfile1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditProfile1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProfileDetailsCompletedEventHandler(object sender, GetProfileDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProfileDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProfileDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateProfileCompletedEventHandler(object sender, UpdateProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdatePhotoCompletedEventHandler(object sender, UpdatePhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ForGotPasswordCompletedEventHandler(object sender, ForGotPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForGotPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForGotPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PrintPrescriptionCompletedEventHandler(object sender, PrintPrescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintPrescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintPrescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FillSpecialisationCompletedEventHandler(object sender, FillSpecialisationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillSpecialisationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillSpecialisationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FillDoctorList1CompletedEventHandler(object sender, FillDoctorList1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDoctorList1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDoctorList1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetConsultationChargesCompletedEventHandler(object sender, GetConsultationChargesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConsultationChargesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConsultationChargesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadDocumentCompletedEventHandler(object sender, UploadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SaveVitalDataCompletedEventHandler(object sender, SaveVitalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveVitalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveVitalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAppointmentDetailsCompletedEventHandler(object sender, GetAppointmentDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppointmentDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppointmentDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetVitalDetailsCompletedEventHandler(object sender, GetVitalDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVitalDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVitalDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSpecializationWiseCountCompletedEventHandler(object sender, GetSpecializationWiseCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpecializationWiseCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpecializationWiseCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591